CREATE PROCEDURE Sales @USER_DATE DATE
AS
BEGIN

DECLARE @INPUT_DATE DATE;
DECLARE @PREV_EOM DATE;
DECLARE @PREV_SOM DATE;
DECLARE @SECOND_WEEK INT;
DECLARE @MAX_ORDER_DATE DATE;
DECLARE @MIN_ORDER_DATE DATE;

SET @INPUT_DATE = @USER_DATE;
SET @PREV_EOM = (SELECT EOMONTH(DATEADD(month,-1,(@INPUT_DATE))));
SET @PREV_SOM = (SELECT DATEFROMPARTS(YEAR(EOMONTH(DATEADD(month,-1,(@INPUT_DATE)))), 
MONTH(EOMONTH(DATEADD(month, -1, (@INPUT_DATE)))),1));
SET @SECOND_WEEK=(SELECT DATEPART(DAY,(@INPUT_DATE)));
SET @MAX_ORDER_DATE= (SELECT MAX(OrderDate) FROM Sales.SalesOrderHeader SOH);
SET @MIN_ORDER_DATE= (SELECT MIN(OrderDate) FROM Sales.SalesOrderHeader SOH);

IF OBJECT_ID('dbo.SALES_TEST', 'U') IS NOT NULL
DROP TABLE SALES_TEST;

IF @SECOND_WEEK>14 AND @INPUT_DATE>@MIN_ORDER_DATE AND @INPUT_DATE<@MAX_ORDER_DATE

SELECT * INTO SALES_TEST from (
SELECT 
DISTINCT YEAR(OrderDate) AS Year,
MONTH(OrderDate) as MONTH,
MAX(TotalDue) OVER (PARTITION BY YEAR(OrderDate), MONTH(OrderDate)) as MaxSales,
SUM(TotalDue) OVER (PARTITION BY YEAR(OrderDate), MONTH(OrderDate)) as SumSales,
AVG(TotalDue) OVER (PARTITION BY YEAR(OrderDate), MONTH(OrderDate)) as AvgSales,
COUNT(CustomerID) OVER (PARTITION BY YEAR(OrderDate), MONTH(OrderDate)) AS custcnt
FROM Sales.SalesOrderHeader  SOH
JOIN Sales.SalesPerson SP ON SOH.SalesPersonID=SP.BusinessEntityID
JOIN Sales.SalesTerritory ST ON SP.TerritoryID = ST.TerritoryID
WHERE OrderDate BETWEEN (@PREV_SOM) AND (@PREV_EOM)

)iftemp;

ELSE

SELECT * into SALES_TEST from (
SELECT DISTINCT MIN(OrderDate) MIN_DATE, MAX(OrderDate) MAX_DATE,
CASE WHEN @INPUT_DATE < @MIN_ORDER_DATE
THEN 
'Input is less than Min Order Date'

WHEN @INPUT_DATE > @MAX_ORDER_DATE
THEN 
'Input is greater than Min Order Date'

ELSE

'Data is not refreshed'

END AS RESULT

FROM Sales.SalesOrderHeader) elsetemp;
END;
